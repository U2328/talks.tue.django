# Generated by Django 2.1.7 on 2019-03-20 21:24

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import markdownx.models
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=32, verbose_name='Title')),
                ('description', markdownx.models.MarkdownxField(max_length=512, verbose_name='Description')),
                ('editors', models.ManyToManyField(related_name='edited_collections', to=settings.AUTH_USER_MODEL, verbose_name='Editors')),
            ],
            options={
                'verbose_name': 'collection',
                'verbose_name_plural': 'collections',
            },
        ),
        migrations.CreateModel(
            name='HistoricalCollection',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('title', models.CharField(max_length=32, verbose_name='Title')),
                ('description', markdownx.models.MarkdownxField(max_length=512, verbose_name='Description')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical collection',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTalk',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('title', models.CharField(max_length=128, verbose_name='Talk title')),
                ('description', markdownx.models.MarkdownxField(max_length=512, verbose_name='Talk description')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Talk date')),
                ('name', models.CharField(max_length=128, verbose_name="Speaker's name")),
                ('about_me', markdownx.models.MarkdownxField(max_length=512, verbose_name="Speaker's about me")),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical talk',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remind_me', models.BooleanField(verbose_name='Remind me')),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Collection', verbose_name='Collection')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'subscription',
                'verbose_name_plural': 'subscriptions',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'tag',
                'verbose_name_plural': 'tags',
            },
        ),
        migrations.CreateModel(
            name='Talk',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128, verbose_name='Talk title')),
                ('description', markdownx.models.MarkdownxField(max_length=512, verbose_name='Talk description')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Talk date')),
                ('name', models.CharField(max_length=128, verbose_name="Speaker's name")),
                ('about_me', markdownx.models.MarkdownxField(max_length=512, verbose_name="Speaker's about me")),
            ],
            options={
                'verbose_name': 'talk',
                'verbose_name_plural': 'talks',
            },
        ),
        migrations.AddField(
            model_name='tag',
            name='talks',
            field=models.ManyToManyField(related_name='tags', to='core.Talk', verbose_name='Talks'),
        ),
        migrations.AddField(
            model_name='collection',
            name='talks',
            field=models.ManyToManyField(related_name='collections', to='core.Talk', verbose_name='Talks'),
        ),
    ]
